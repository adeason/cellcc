=head1 NAME

cellcc_check-server - Run the CellCC restore-server

=head1 SYNOPSIS

B<cellcc check-server> [B<--once>]

=head1 DESCRIPTION

B<cellcc check-server> runs the CellCC "check-server", which periodically
checks CellCC sync jobs for problems.

If a sync job has failed due a stage in the sync explicitly failing (that is,
it has notified the database that the stage has failed), B<cellcc check-server>
will attempt to resume the job starting at the last successful stage.
B<cellcc check-server> also detects if a job appears to have failed without
notifying the database; if the database has not received an update in a certain
amount of time, B<cellcc check-server> will mark the job as failed.

If a job has failed and been resumed too many times (see the
B<check/error-limit> directive in L<cellcc_config(1)>), B<cellcc check-server>
will no longer keep trying to resume the job. Instead, the job will be
permanently stuck in an error state until an administrator rectifies the
problem. When the job should be retried again, you can run the
L<cellcc_retry-job(1)> command to cause it to be retried.

If a sync job has finished, B<cellcc check-server> also performs the task of
deleting such jobs from the database and logging that they finished
successfully.

=head1 ALERTS

B<cellcc check-server> also serves the purpose of notifying administrators when
errors occur. If a job fails and is resumed, or if a job fails permanently, or
a job appears "stuck" due to a variety of factors, B<cellcc check-server> will
notify administrators with one or more "alerts". Currently the possible alerts
are known as:

=over 4

=item ALERT_ERRORLIMIT

This alert is generated when a job is retried too many times, and is now
permanently failed. The volume cannot be synced until the problem is rectified,
and the job is explicitly retried or killed.

=item ALERT_RETRY

This alert is generated when a job is known to have failed, and the job is
automatically retried. This is not always a problem, since the sync may proceed
successfully on retry, but an alert is generated to notify administrators that
there was at least a transient problem.

=item ALERT_EXPIRED

This alert is generated when a job is not marked as failed, but has taken too
long to receive an update. This can happen if the relevant B<cellcc> process
was killed uncleanly (a KILL signal, the machine crashes, etc). In this case,
B<cellcc check-server> will mark the job as failed and will retry the job
automatically.

=item ALERT_STALE

This alert is generated when a job has not received an update in a long time.
This differs from the C<ALERT_EXPIRED> alert because the job is not marked as
failed. In the C<ALERT_EXPIRED> alert, a sync stage has promised that it would
update the job in a certain amount of time and it failed to do so, indicating a
probable failure.

However, with an C<ALERT_STALE> alert, the sync stage has made no promises on
how soon the next update would come, but the job has gone without any update
for a long time. This typically happens between stages when the job is "passed
off" to a different machine, and this alert may indicate that a dump-server or
restore-server process is not running.

=item ALERT_OLD

This alert is generated when a sync job appears to be proceeding normally, and
is receiving updates as promised, but the job is simply taking a long time to
finish.

This alert may indicate that a B<vos> command somewhere is hanging, but is
managing to not die, or in general that some operation is hanging but not
blocking the B<cellcc> processing. Or this alert can simply be the result of a
large volume being synced, or being synced over a slow network or other slow
resource.

=back

Alerts are generated by either running a command, or just by logging alert
information. See the L<celcc_config(1)> directives for B<check/alert-cmd> and
B<check/alert-log>. Some alerts may seem more or less important than others, so
if you only want to receive some alerts or only receive some at certain
intervals, it is recommended to configure a B<check/alert-cmd/json> command.
That way, such a command can interpret the details of an alert in a
machine-readable manner, and filter our or combine alerts according to the
desired logic.

=head1 OPTIONS

=over 4

=item B<--once>

By default, B<cellcc check-server> will run as a daemon, periodically waking up
to check on all sync jobs. If the B<--once> flag is passed, instead B<cellcc
check-server> will just look through all running sync jobs once, and perform
any needed actions on them. Once all actions have been performed,
B<cellcc check-server> will exit.

This option can be useful for debugging, or if you want to schedule the
scanning of sync jobs yourself, instead of letting B<cellcc check-server>
handle sleeping and waking on its own.

=back

=head1 PRIVILEGE REQUIRED

The issuer of this command must be able to read the "admin" CellCC
configuration, typically in B</etc/cellcc/cellcc_admin.json>, which allows
write operations to the CellCC system. Typically this is only allowed for
administrators or accounts dedicated to this "syncing" functionality.

=head1 COPYRIGHT

Copyright (c) 2015, Sine Nomine Associates.

See the provided LICENSE file for licensing terms.
